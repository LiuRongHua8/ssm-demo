<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">


    <!--这里让扫描controller，指定controller的包-->
    <context:component-scan base-package="com.iotknowyou.controller"/>

    <!--     注解的映射器  -->
    <!--      <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
    <!--     注解的适配器 -->
    <!--      <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
    <!-- 使用 mvc:annotation-driven可以代替上面注解映射器和注解适配器配置
    mvc:annotation-driven默认加载了很多的参数绑定方法，比如json转换解析器就默认加载了
    实际开发中使用mvc:annotation-driven
    -->
    <!-- 注解驱动：配置处理器映射器和适配器 -->
    <mvc:annotation-driven/>

    <!--
    视图解析器 解析jsp解析，
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/WEB-INF/view"/>
        <!-- 配置jsp路径的后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--静态资源映射-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/js"/>





    <!-- 定义一个拦截器，当访问 /hello 时会被拦截 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/hello" />
            <bean class="com.iotknowyou.common.commonInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 配置多个拦截器-->

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/toLogin" />
            <bean class="com.iotknowyou.common.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>





<!--

    &lt;!&ndash; 配置拦截器 &ndash;&gt;
    <mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash; 拦截所有mvc控制器 &ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash; mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
                LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) &ndash;&gt;
            <mvc:exclude-mapping path="/login" />
            <bean class="com.iotknowyou.common.commonInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

-->





    <!--&lt;!&ndash;       转换器 &ndash;&gt;-->
    <!--<property name="converters">-->
    <!--<list>-->
    <!--&lt;!&ndash;      日期类型转换 &ndash;&gt;-->
    <!--<bean class="com.lnp.controller.converter.CustomDateConverter"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 全局拦截器 &ndash;&gt;-->
    <!--<mvc:interceptors>-->
    <!--&lt;!&ndash; 顺序执行 &ndash;&gt;-->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<bean class="com.lnp.interceptor.HandlerInterceptor1"></bean>-->
    <!--</mvc:interceptor>-->

    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<bean class="com.lnp.interceptor.HandlerInterceptor2"></bean>-->
    <!--</mvc:interceptor>-->

    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<bean class="com.lnp.interceptor.LoginInterceptor"></bean>-->
    <!--</mvc:interceptor>-->

    <!--</mvc:interceptors>-->
</beans>